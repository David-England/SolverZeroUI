@page "/"

@inject ISolver Solver

<div>
	<SudokuInput Grid="_input" DoOnUpdate="() => StateHasChanged()" />
	<Sudoku Grid="_input" />
	<button @onclick=Solve>Solve</button>
</div>

@if (_isLoading)
{
	<div class="loading">LOADING....</div>
}

@if (Solutions.Count > 0)
{
	<p>
		Please find your solution below. If the final grid has gaps remaining, we have not been
		able to completely solve your problem.
	</p>
}

@foreach (int[,] solution in Solutions)
{
	<Sudoku Grid="solution" />
}

@code {
	private bool _isLoading = false;
	private int[,] _input = new int[9, 9];
	private List<int[,]>? _solutions;

	private List<int[,]> Solutions => _solutions ?? new List<int[,]>();

	private async void Solve()
	{
		_isLoading = true;
		_solutions = await Solver.Solve(_input);

		_isLoading = false;
		StateHasChanged();
	}
}